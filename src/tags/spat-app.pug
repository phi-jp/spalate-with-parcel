spat-app
  div.h-full(ref='pages')

  div(data-is='spat-modal')


  style(type='less').
    :scope {
      display: block;
      height: 100%;

      .spat-page {
        height: 100%;
      }
    }

  script.
    this.title = 'Hello, spat with parcel!';

    this.on('mount', async () => {
    });

    var sleep = (msec) => new Promise(resolve => setTimeout(resolve, msec));

    this.gotoPage = async (route, req, res) => {
      // route からタグ名を取得
      var tagName = '';
      if (typeof route.tag === 'function') {
        tagName = await route.tag({req, res})
      }
      else {
        tagName = route.tag;
      }

      this.refs.pages.innerHTML = '';
      
      var element = document.createElement('div');
      element.setAttribute('data-is', tagName);
      element.setAttribute('class', 'spat-page');
      var pageTag = riot.mount(element, tagName)[0];
      this.refs.pages.appendChild(element);

      // preload 実行
      try {
        await this.preload(pageTag, req, res);

        // head 取得
        this.head = this.getHead(pageTag);

        this.pageTag = pageTag;
      }
      catch (e) {
        res.error = e;
        // エラーが出たら page-error を表示する
        await this.gotoPage({
          tag: 'page-error',
        }, req, res);

        return ;
      }
    };

    this.preload = async (tag, req, res) => {
      if (tag.preload) {
        var data = await tag.preload({req, res});
        Object.assign(tag, data);
        tag.update();
      }

      // すべてのタグをまとめて配列化
      var tags = _.flatten(Object.values(tag.tags));

      // 子タグがない場合は何もしない
      if (tags.length <= 0) return ;

      // preload する
      var promises = tags.map(async (tag) => {
        return this.preload(tag, req, res);
      });

      await Promise.all(promises);
    };

    this.getHead = (tag) => {
      var head = {};
      spat.utils.extendDeep(head, spat.config.head);
      if (tag.head) {
        var data = tag.head();
        spat.utils.extendDeep(head, data);
      }

      return head;
    };
