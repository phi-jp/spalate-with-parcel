spalate-modal(show="{visible}")

  style(type='less').
    :scope {
      transform: translate3d(0, 0, 0);

      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;

      display: block;
      z-index: 9999;

      .modal-content {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }

      @keyframes modal-fade-in {
        0% { opacity: 0; }
        100% { opacity: 1; }
      }
      @keyframes modal-fade-out {
        0% { opacity: 1; }
        100% { opacity: 0; }
      }

      @keyframes modal-push-in {
        0% { transform: translateY(200px); opacity: 0; }
        100% { transform: translateY(0px); opacity: 1; }
      }
      @keyframes modal-push-out {
        0% { transform: translateY(0px); opacity: 1; }
        100% { transform: translateY(200px); opacity: 0; }
      }

      @keyframes modal-left-in {
        0% { transform: translateX(-200px); opacity: 0; }
        100% { transform: translateX(0px); opacity: 1; }
      }
      @keyframes modal-left-out {
        0% { transform: translateX(0px); opacity: 1; }
        100% { transform: translateX(-200px); opacity: 0; }
      }

      @keyframes modal-right-in {
        0% { transform: translateX(200px); opacity: 0; }
        100% { transform: translateX(0px); opacity: 1; }
      }
      @keyframes modal-right-out {
        0% { transform: translateX(0px); opacity: 1; }
        100% { transform: translateX(200px); opacity: 0; }
      }
    }
  
  script.
    this.open = (tagName, options) => {
      var _options = Object.assign({
        dismissible: true,
      }, options);

      var element = document.createElement('div');
      this.root.appendChild(element);

      var modalTag = riot.mount(element, tagName, _options)[0];
      element.classList.add('modal-content');

      // アニメーション
      var animation = element.getAttribute('spat-animation') || 'push';
      modalTag.refs.modal.style.animation = `modal-${animation}-in 256ms`;

      modalTag.promise = new Promise((resolve) => {
        modalTag.close = async () => {
          // close 中だったら何もしない
          if (modalTag.isClose) return ;

          modalTag.isClose = true;
          await this.close(modalTag);
          resolve();
        };
        modalTag.waitClose = () => {
          return modalTag.promise;
        };
        modalTag.update();
      });

      // dismissible: true のときは背景 click で閉じれるようにする
      if (_options.dismissible) {
        modalTag.root.addEventListener('click', modalTag.close);
      }

      // 表示更新
      this.update({visible: true});

      return modalTag;
    };

    this.close = (modalTag) => {
      return new Promise(resolve => {
        // アニメーション
        var animation = modalTag.root.getAttribute('spat-animation') || 'push';
        modalTag.refs.modal.style.animation = `modal-${animation}-out 256ms forwards`;

        modalTag.refs.modal.addEventListener('animationend', (e) => {
          modalTag.unmount();

          // モーダルが全てなくなっていたら非表示にする
          if (this.root.childNodes.length <= 0) {
            this.update({visible: false});
          }

          resolve();
        });
      });
    };

    this.alert = (title, description, options) => {
      var _options = {title, description, ...options};
      return this.open('modal-alert', _options);
    };
